---
import Exercise from "@/Components/Exercise/Exercise.astro";
import Input from "@/Components/Input.astro";
import Label from "@/Components/Label.astro";
---

<Exercise
  title="Time Zone Converter"
  description=`Convert time from diferents time zones to other time zones`
  messageId="message-tz-converter"
>
  <form class="max-w-96 w-full mx-auto h-fit" id="form-tz-converter">
    <div class="flex gap-2 w-full flex-wrap justify-center">
      <Label>
        Time
        <Input name="time" type="time" required />
      </Label>
      <Label>
        Date
        <Input name="date" type="date" required />
      </Label>
      <Label>
        Time zone
        <select
          class="outline-none rounded-md px-3 py-2 border
          bg-zinc-200 text-zinc-500 border-zinc-300
          focus:text-zinc-700 hover:border-secondary-400 focus:border-zinc-400
          dark:bg-zinc-800 dark:text-zinc-300 dark:border-zinc-700
          dark:focus:text-secondary-100 dark:hover:border-secondary-800 dark:focus:border-zinc-400"
          name="time-zone"
          required
        >
          <option value="JST">JST</option>
          <option value="CEST" selected>CEST</option>
          <option value="UTC">UTC</option>
          <option value="EST">EST</option>
          <option value="CST">CST</option>
          <option value="PDT">PDT</option>
        </select>
      </Label>
    </div>
  </form>
</Exercise>

<script is:inline type="module">
  import { debounce, handleDomElement, $, validStringDate } from "/js/utils.js";

  (() => {
    const delay = 250;

    Date.prototype.toDateInputValue = function () {
      var local = new Date(this);
      local.setMinutes(this.getMinutes() - this.getTimezoneOffset());
      return local.toJSON().slice(0, 10);
    };

    const $form11 = $("#form-tz-converter");
    const $message = $('[data-id="message-tz-converter"]');

    if (!($form11 instanceof HTMLFormElement)) {
      return;
    }

    const $inputTime = $form11.elements["time"];
    const $inputDate = $form11.elements["date"];
    const $selectTimeZone = $form11.elements["time-zone"];

    if (
      !($inputTime instanceof HTMLInputElement) ||
      !($inputDate instanceof HTMLInputElement) ||
      !($selectTimeZone instanceof HTMLSelectElement) ||
      !($message instanceof HTMLElement)
    ) {
      return;
    }

    // $message.classList.add("flex", "gap-2", "justify-center", "flex-wrap");
    $message.classList.add(
      "grid",
      "grid-cols-[repeat(auto-fit,_minmax(128px,_156px))]",
      "gap-2",
      "justify-center",
    );

    const [, setMessage] = handleDomElement($message);
    const [time, , getCurrentTime] = handleDomElement($inputTime);
    const [date, setDate, getCurrentDate] = handleDomElement($inputDate);
    const [timeZone, , getCurrentTimeZone] = handleDomElement($selectTimeZone);

    setDate(new Date().toDateInputValue());

    const utcDifferences = {
      JST: 9,
      CEST: 2,
      UTC: 0,
      EST: -4,
      CST: -5,
      PDT: -7,
    };

    const handleInputChange = () => {
      getCurrentTime();
      getCurrentTimeZone();
      getCurrentDate();

      const currentOffsetHours = Object.hasOwn(utcDifferences, timeZone.value)
        ? utcDifferences[timeZone.value]
        : utcDifferences.CEST;

      if (time.value === "" || date.value === "") {
        setMessage("");
        return;
      }

      const [hoursString, minutesString] = time.value.split(":");
      const hours = Number(hoursString);
      const minutes = Number(minutesString);

      if (hours > 23 || hours < 0 || minutes > 60 || minutes < 0) {
        setMessage("Invalid time");
        return;
      }

      if (!validStringDate(date.value)) {
        setMessage("Invalid date");
        return;
      }

      const currentDate = new Date(date.value);
      currentDate.setUTCHours(hours);
      currentDate.setUTCMinutes(minutes);

      const selectedDate = offsetDate(currentDate, -currentOffsetHours, 0);

      setMessage(
        Object.entries(utcDifferences)
          .map(([timeZone, offsetHours]) => {
            const location = getOffsetDate(selectedDate, offsetHours);

            return `
             <div
               class="outline-none rounded-md px-3 py-2 border
                 bg-white text-zinc-800 border-zinc-200
                 hover:border-secondary-300
                 dark:bg-zinc-950 dark:text-zinc-200 dark:border-zinc-800
                 dark:hover:border-secondary-900
                 flex gap-2 items-center justify-center
                 "
             >
               <div class="font-light">
                 <p>${timeZone}</p>
                 <p class="text-xs">${location.day}/${location.month}</p>
                 <p class="text-xs">UTC ${location.offsetHoursString}</p>
               </div>
               <p class="font-semibold text-secondary-600 dark:text-secondary-400">${location.timeString.substring(0, 5)}</p>
             </div>
           `;
          })
          .join(""),
      );
    };

    handleInputChange();

    const debouncedHandleInputChange = debounce(handleInputChange, delay);

    $inputTime.addEventListener("keypress", (event) => {
      if (!/[0-9]/.test(event.key)) {
        event.preventDefault();
      }
    });

    $inputTime.addEventListener("change", () => {
      debouncedHandleInputChange();
    });

    $inputDate.addEventListener("change", () => {
      handleInputChange();
    });

    $selectTimeZone.addEventListener("change", () => {
      handleInputChange();
    });

    function isValidDate(date) {
      if (date instanceof Date && !isNaN(date.getTime())) {
        return true;
      }

      return false;
    }

    function getDateFromString(stringDate) {
      const newDate = new Date(stringDate);

      if (!isValidDate(newDate)) {
        return undefined;
      }

      const newStringDate = newDate.toISOString();

      const yearMonthDayString = newStringDate.split("T").at(0);
      const timeString = newStringDate.split("T").at(1) ?? "";

      const month = yearMonthDayString.split("-").at(1) ?? "";
      const day = yearMonthDayString.split("-").at(2) ?? "";
      const hours = timeString.split(":").at(0) ?? "";
      const minutes = timeString.split(":").at(1) ?? "";

      return {
        month,
        day,
        hours,
        minutes,
        timeString,
      };
    }

    function getOffsetDate(date, offsetHours) {
      if (!isValidDate(date) || isNaN(Number(offsetHours))) {
        return undefined;
      }

      const offsetDate = new Date(
        date.getTime() + offsetHours * 60 * 60 * 1000,
      );

      return {
        ...getDateFromString(offsetDate.toISOString()),
        offsetHours,
        offsetHoursString:
          (offsetHours < 0 ? offsetHours : "+" + offsetHours) + ":00",
      };
    }

    function offsetDate(date, offsetHours, offsetMinutes) {
      if (
        !isValidDate(date) ||
        isNaN(Number(offsetHours)) ||
        isNaN(Number(offsetMinutes))
      ) {
        return undefined;
      }

      return new Date(
        date.getTime() +
          offsetHours * 60 * 60 * 1000 +
          offsetMinutes * 60 * 1000,
      );
    }
  })();
</script>
