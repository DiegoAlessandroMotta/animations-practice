---
import ExerciseBox from "@/Components/Exercise/ExerciseBox.astro";
import ExerciseContent from "@/Components/Exercise/ExerciseContent.astro";
import ExerciseFooter from "@/Components/Exercise/ExerciseFooter.astro";
import ExerciseHeader from "@/Components/Exercise/ExerciseHeader.astro";
import Input from "@/Components/Input.astro";
import Label from "@/Components/Label.astro";
---

<ExerciseBox>
  <ExerciseHeader title="Ejercicio 9">
    Con un for imprima los números pares de la tabla de multiplicar del 7 por
    separado.
  </ExerciseHeader>
  <ExerciseContent>
    <form class="max-w-64 w-full mx-auto h-fit" id="form-9">
      <Label>
        Multiplicador
        <Input
          name="multiplier"
          type="number"
          min="1"
          max="99"
          autocomplete="off"
          required
        />
      </Label>
      <Label>
        Límite
        <Input
          name="limiter"
          type="number"
          min="1"
          max="50"
          autocomplete="off"
          required
        />
      </Label>
    </form>
  </ExerciseContent>
  <ExerciseFooter messageId="message-9">
    </p>
    <div
      class="flex gap-6 flex-wrap justify-center invisible"
      data-id="message-table-box"
    >
      <div>
        <p class="border-b border-zinc-300 dark:border-zinc-700 mb-3 pb-1">
          Tabla de multiplicar (impar)
        </p>
        <p data-id="message-table-odd"></p>
      </div>
      <div>
        <p class="border-b border-zinc-300 dark:border-zinc-700 mb-3 pb-1">
          Tabla de multiplicar (par)
        </p>
        <p data-id="message-table-even"></p>
      </div>
    </div>
  </ExerciseFooter>
</ExerciseBox>

<script is:inline type="module">
  import { debounce, handleDomElement, $ } from "/js/utils.js";

  (() => {
    const delay = 250;
    // Ejercicio 9
    const $form9 = $("#form-9");

    if (!($form9 instanceof HTMLFormElement)) {
      return;
    }

    const $multiplier = $form9.elements["multiplier"];
    const $limiter = $form9.elements["limiter"];
    const $tableBox = $('[data-id="message-table-box"]');
    const $tableOdd = $('[data-id="message-table-odd"]');
    const $tableEven = $('[data-id="message-table-even"]');
    const $message = $('[data-id="message-9"]');

    if (
      !($multiplier instanceof HTMLInputElement) ||
      !($limiter instanceof HTMLInputElement) ||
      !($tableBox instanceof HTMLElement) ||
      !($tableOdd instanceof HTMLElement) ||
      !($tableEven instanceof HTMLElement) ||
      !($message instanceof HTMLElement)
    ) {
      return;
    }

    const [, setMessage] = handleDomElement($message);
    const [multiplier, setMultiplier, getCurrentMultiplier] =
      handleDomElement($multiplier);
    const [limiter, setLimiter, getCurrentLimiter] = handleDomElement($limiter);

    setMultiplier(7);
    setLimiter(12);

    const [, setTableOdd] = handleDomElement($tableOdd);
    const [, setTableEven] = handleDomElement($tableEven);

    const handleInputChange = () => {
      getCurrentMultiplier();
      getCurrentLimiter();

      if (multiplier.value === "" || limiter.value === "") {
        setTableOdd("");
        setTableEven("");
        setMessage("");
        $tableBox.classList.add("invisible");
        return;
      }

      if (!/[0-9]/.test(multiplier.value) || !/[0-9]/.test(limiter.value)) {
        setMessage("El valor ingresado no es un numero");
        setTableOdd("");
        setTableEven("");
        $tableBox.classList.add("invisible");
        return;
      }

      if (multiplier.value.length > 2 || multiplier.value > 99) {
        setMessage("El valor máximo del multiplicador es 99");
        setTableOdd("");
        setTableEven("");
        $tableBox.classList.add("invisible");
        return;
      }

      if (limiter.value.length > 2 || limiter.value > 50) {
        setMessage("El valor máximo del limitador es 50");
        setTableOdd("");
        setTableEven("");
        $tableBox.classList.add("invisible");
        return;
      }

      const oddResults = [];
      const evenResults = [];

      for (let i = 1; i <= limiter.value; i++) {
        const result = multiplier.value * i;
        const resultMessage = `<li>${multiplier.value} x ${i} = ${result}</li>`;

        if (i % 2 === 0) {
          evenResults.push(resultMessage);
          continue;
        }

        oddResults.push(resultMessage);
      }

      setTableOdd(`
        <ul>
          ${oddResults.join("")}
        </ul>
      `);

      setTableEven(`
        <ul>
          ${evenResults.join("")}
        </ul>
      `);

      setMessage("");
      $tableBox.classList.remove("invisible");
    };

    const debouncedHandleInputChange = debounce(handleInputChange, delay);

    $multiplier.addEventListener("keypress", (event) => {
      if (!/[0-9]/.test(event.key)) {
        event.preventDefault();
      }
    });

    $multiplier.addEventListener("input", () => {
      debouncedHandleInputChange();
    });

    $limiter.addEventListener("keypress", (event) => {
      if (!/[0-9]/.test(event.key)) {
        event.preventDefault();
      }
    });

    $limiter.addEventListener("input", () => {
      debouncedHandleInputChange();
    });

    handleInputChange();
  })();
</script>
